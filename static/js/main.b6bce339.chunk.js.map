{"version":3,"sources":["core/components/loader/context.tsx","core/components/loader/loader.tsx","core/layouts/public.tsx","modules.ts","modules/docs/index.ts","modules/website/index.ts","modules/error/index.ts","app.tsx","reportWebVitals.ts","index.tsx"],"names":["LoaderContext","React","createContext","active","setActive","useLoaderContext","ctx","useContext","Error","LoaderProvider","props","children","useState","value","useMemo","Provider","Indicator","percent","setPercent","useEffect","timeoutId","setTimeout","p","clearTimeout","IndicatorFallback","Loader","fallback","Public","route","undefined","className","page","modules","routes","path","exact","layout","PublicLayout","lazy","appRoutes","forEach","module","concat","App","map","key","sensitive","strict","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAOMA,EAAgBC,IAAMC,cAAkC,CAC5DC,QAAQ,EACRC,UAAW,eAGAC,EAAmB,WAC9B,IAAMC,EAAML,IAAMM,WAAWP,GAC7B,IAAKM,EACH,MAAM,IAAIE,MAAM,uDAElB,OAAOF,GAOIG,EAAgD,SAACC,GAAoD,IACxGC,EAAaD,EAAbC,SADuG,EAEnFV,IAAMW,UAAS,GAFoE,mBAExGT,EAFwG,KAEhGC,EAFgG,KAGzGS,EAAQZ,IAAMa,SAA4B,iBAAO,CAAEX,SAAQC,eAAc,CAACD,EAAQC,IACxF,OAAO,cAACJ,EAAce,SAAf,CAAwBF,MAAOA,EAA/B,SAAuCF,KCxBnCK,EAAsB,WAAkC,IAC3Db,EAAWE,IAAXF,OAD0D,EAEpCS,mBAAS,GAF2B,mBAE3DK,EAF2D,KAElDC,EAFkD,KAalE,OATAC,qBAAU,WACR,IAAMC,EAAYC,YAAW,WAC3BH,GAAW,SAACI,GAAD,OAAQA,EAAI,IAAMA,EAAI,GAAK,SACrC,KACH,OAAO,WACLC,aAAaH,OAIVjB,EAAS,cAAC,IAAD,CAAUc,QAASA,IAAc,MAGtCO,EAA8B,WAAkC,IACnEpB,EAAcC,IAAdD,UASR,OAPAe,qBAAU,WAER,OADAf,GAAU,GACH,WACLA,GAAU,OAIP,MAOIqB,EAAgC,SAAC,GAAmD,IAAjDd,EAAgD,EAAhDA,SAC9C,OACE,eAAC,EAAD,WACE,cAAC,EAAD,IACA,cAAC,WAAD,CAAUe,SAAU,cAAC,EAAD,IAApB,SAA4Cf,QCtBnCgB,EAd0B,SAACjB,GAA+C,IAC/EkB,EAAUlB,EAAVkB,MACR,OAAc,OAAVA,QAA4BC,IAAVD,EACb,6BAGP,qBAAKE,UAAU,MAAf,SACE,cAAC,EAAD,UACE,cAACF,EAAMG,KAAP,eAAgBrB,SCPlBsB,EAA4B,CCFJ,CAC5BC,OAAQ,CACN,CACEC,KAAM,QACNC,OAAO,EACPC,OAAQC,EACRN,KAAM9B,IAAMqC,MAAK,kBAAM,mCCNM,CACjCL,OAAQ,CACN,CACEC,KAAM,IACNC,OAAO,EACPC,OAAQC,EACRN,KAAM9B,IAAMqC,MAAK,kBAAM,mCCNE,CAC7BL,OAAQ,CACN,CACEC,KAAM,aACNC,OAAO,EACPC,OAAQC,EACRN,KAAM9B,IAAMqC,MAAK,kBAAM,iCAEzB,CACEF,OAAQC,EACRN,KAAM9B,IAAMqC,MAAK,kBAAM,oCHNzBC,EAA6B,GAEjCP,EAAQQ,SAAQ,SAACC,GACXA,EAAOR,SACTM,EAAYA,EAAUG,OAAOD,EAAOR,YAIjC,IAAMA,EAASM,EIePI,G,wBAhBO,WACpB,OACE,cAAC,IAAD,UACE,cAAC,IAAD,UACGV,EAAOW,KAAI,SAAChB,EAAOiB,GAClB,OACE,cAAC,IAAD,CAAiBX,KAAMN,EAAMM,KAAMC,MAAOP,EAAMO,MAAOW,UAAWlB,EAAMkB,UAAWC,OAAQnB,EAAMmB,OAAjG,SACGnB,EAAMQ,OAAS,cAACR,EAAMQ,OAAP,CAAcR,MAAOA,IAAY,cAACA,EAAMG,KAAP,CAAYH,MAAOA,KAD1DiB,YCPTG,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b6bce339.chunk.js","sourcesContent":["import React from 'react';\n\nexport interface LoaderContextModel {\n  active: boolean;\n  setActive: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst LoaderContext = React.createContext<LoaderContextModel>({\n  active: false,\n  setActive: () => {},\n});\n\nexport const useLoaderContext = (): LoaderContextModel => {\n  const ctx = React.useContext(LoaderContext);\n  if (!ctx) {\n    throw new Error('useLoaderContext must be used within LoaderProvider');\n  }\n  return ctx;\n};\n\nexport interface LoaderProviderProps {\n  children?: React.ReactNode;\n}\n\nexport const LoaderProvider: React.FC<LoaderProviderProps> = (props: LoaderProviderProps): React.ReactElement => {\n  const { children } = props;\n  const [active, setActive] = React.useState(false);\n  const value = React.useMemo<LoaderContextModel>(() => ({ active, setActive }), [active, setActive]);\n  return <LoaderContext.Provider value={value}>{children}</LoaderContext.Provider>;\n};\n","import React, { Suspense, useEffect, useState } from 'react';\nimport Progress from 'react-progress';\nimport { LoaderProvider, useLoaderContext } from './context';\n\nexport const Indicator: React.FC = (): React.ReactElement | null => {\n  const { active } = useLoaderContext();\n  const [percent, setPercent] = useState(0);\n\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      setPercent((p) => (p < 100 ? p + 10 : 100));\n    }, 100);\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  });\n\n  return active ? <Progress percent={percent} /> : null;\n};\n\nexport const IndicatorFallback: React.FC = (): React.ReactElement | null => {\n  const { setActive } = useLoaderContext();\n\n  useEffect(() => {\n    setActive(true);\n    return () => {\n      setActive(false);\n    };\n  });\n\n  return null;\n};\n\nexport interface LoaderProps {\n  children?: React.ReactNode;\n}\n\nexport const Loader: React.FC<LoaderProps> = ({ children }: LoaderProps): React.ReactElement => {\n  return (\n    <LoaderProvider>\n      <Indicator />\n      <Suspense fallback={<IndicatorFallback />}>{children}</Suspense>\n    </LoaderProvider>\n  );\n};\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React from 'react';\nimport { Loader } from '../components/loader';\nimport { RoutePageProps } from '../routing';\n\nconst Public: React.FC<RoutePageProps> = (props: RoutePageProps): React.ReactElement => {\n  const { route } = props;\n  if (route === null || route === undefined) {\n    return <></>;\n  }\n  return (\n    <div className=\"app\">\n      <Loader>\n        <route.page {...props} />\n      </Loader>\n    </div>\n  );\n};\n\nexport default Public;\n","import { AppModule, AppRoute } from './core';\n\nimport docsModule from './modules/docs';\nimport websiteModule from './modules/website';\nimport errorModule from './modules/error';\n\nconst modules: Array<AppModule> = [docsModule, websiteModule, errorModule];\n\nlet appRoutes: Array<AppRoute> = [];\n\nmodules.forEach((module) => {\n  if (module.routes) {\n    appRoutes = appRoutes.concat(module.routes);\n  }\n});\n\nexport const routes = appRoutes;\n\nexport default modules;\n","import React from 'react';\nimport { AppModule } from '../../core';\nimport { PublicLayout } from '../../core/layouts';\n\nconst docsModule: AppModule = {\n  routes: [\n    {\n      path: '/docs',\n      exact: true,\n      layout: PublicLayout,\n      page: React.lazy(() => import('./pages/home')),\n    },\n  ],\n};\n\nexport default docsModule;\n","import React from 'react';\nimport { AppModule } from '../../core';\nimport { PublicLayout } from '../../core/layouts';\n\nconst dashboardModule: AppModule = {\n  routes: [\n    {\n      path: '/',\n      exact: true,\n      layout: PublicLayout,\n      page: React.lazy(() => import('./pages/home')),\n    },\n  ],\n};\n\nexport default dashboardModule;\n","import React from 'react';\nimport { AppModule } from '../../core';\nimport { PublicLayout } from '../../core/layouts';\n\nconst errorModule: AppModule = {\n  routes: [\n    {\n      path: '/forbidden',\n      exact: true,\n      layout: PublicLayout,\n      page: React.lazy(() => import('./pages/forbidden')),\n    },\n    {\n      layout: PublicLayout,\n      page: React.lazy(() => import('./pages/not-found')),\n    },\n  ],\n};\n\nexport default errorModule;\n","/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport { Switch, BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport { routes } from './modules';\n\n// import spinkit styles\nimport 'spinkit/spinkit.min.css';\n// Import Font Awesome Icons Set\nimport 'font-awesome/css/font-awesome.min.css';\n// Import Simple Line Icons Set\nimport 'simple-line-icons/css/simple-line-icons.css';\n\nimport './assets/styles/style.css';\n\nconst App: React.FC = (): React.ReactElement => {\n  return (\n    <Router>\n      <Switch>\n        {routes.map((route, key) => {\n          return (\n            <Route key={key} path={route.path} exact={route.exact} sensitive={route.sensitive} strict={route.strict}>\n              {route.layout ? <route.layout route={route} /> : <route.page route={route} />}\n            </Route>\n          );\n        })}\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}